import { PrismaClient, UserRole, TicketStatus, TicketPriority } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed completo de la base de datos...');

  // Limpiar base de datos existente
  console.log('üóëÔ∏è Limpiando datos existentes...');
  await prisma.auditLog.deleteMany();
  await prisma.attachment.deleteMany();
  await prisma.comment.deleteMany();
  await prisma.ticket.deleteMany();
  await prisma.user.deleteMany();
  await prisma.notification.deleteMany();
  await prisma.notificationPreferences.deleteMany();

  console.log('‚úÖ Base de datos limpiada');

  // Crear usuarios
  console.log('üë• Creando usuarios...');
  
  const passwordHash = await bcrypt.hash('password123', 10);

  const admin = await prisma.user.create({
    data: {
      email: 'admin@empresa.com',
      passwordHash,
      name: 'Administrador del Sistema',
      role: UserRole.ADMIN
    }
  });

  const agent1 = await prisma.user.create({
    data: {
      email: 'agente1@empresa.com',
      passwordHash,
      name: 'Mar√≠a Gonz√°lez',
      role: UserRole.AGENT
    }
  });

  const agent2 = await prisma.user.create({
    data: {
      email: 'agente2@empresa.com',
      passwordHash,
      name: 'Carlos Rodr√≠guez',
      role: UserRole.AGENT
    }
  });

  const user1 = await prisma.user.create({
    data: {
      email: 'usuario1@empresa.com',
      passwordHash,
      name: 'Ana Mart√≠nez',
      role: UserRole.USER
    }
  });

  const user2 = await prisma.user.create({
    data: {
      email: 'usuario2@empresa.com',
      passwordHash,
      name: 'Luis P√©rez',
      role: UserRole.USER
    }
  });

  const user3 = await prisma.user.create({
    data: {
      email: 'usuario3@empresa.com',
      passwordHash,
      name: 'Sofia L√≥pez',
      role: UserRole.USER
    }
  });

  console.log('‚úÖ Usuarios creados');

  // Crear tickets
  console.log('üé´ Creando tickets...');

  const tickets = await Promise.all([
    // Ticket 1: Problema de login
    prisma.ticket.create({
      data: {
        title: 'Error al iniciar sesi√≥n en el sistema',
        description: 'No puedo acceder a mi cuenta desde ayer. Aparece un error de credenciales inv√°lidas. He intentado cambiar la contrase√±a pero sigue sin funcionar.',
        priority: TicketPriority.HIGH,
        status: TicketStatus.OPEN,
        requesterId: user1.id
      }
    }),

    // Ticket 2: Problema con impresora
    prisma.ticket.create({
      data: {
        title: 'Impresora del departamento de contabilidad no funciona',
        description: 'La impresora HP LaserJet del departamento de contabilidad no est√° funcionando correctamente. Muestra un error de "Paper Jam" pero no hay papel atascado.',
        priority: TicketPriority.MEDIUM,
        status: TicketStatus.IN_PROGRESS,
        requesterId: user2.id,
        assigneeId: agent1.id
      }
    }),

    // Ticket 3: Solicitud de software
    prisma.ticket.create({
      data: {
        title: 'Necesito instalar Adobe Photoshop',
        description: 'Soy dise√±ador gr√°fico y necesito Adobe Photoshop instalado en mi computadora para trabajar en los proyectos de marketing. ¬øPueden instalarlo?',
        priority: TicketPriority.LOW,
        status: TicketStatus.RESOLVED,
        requesterId: user3.id,
        assigneeId: agent2.id,
        closedAt: new Date(Date.now() - 24 * 60 * 60 * 1000) // 1 d√≠a atr√°s
      }
    }),

    // Ticket 4: Internet lento
    prisma.ticket.create({
      data: {
        title: 'Conexi√≥n a internet muy lenta en todo el edificio',
        description: 'La conexi√≥n a internet est√° extremadamente lenta en todo el edificio desde esta ma√±ana. Es imposible trabajar con esta velocidad.',
        priority: TicketPriority.URGENT,
        status: TicketStatus.OPEN,
        requesterId: user1.id
      }
    }),

    // Ticket 5: Problema con email
    prisma.ticket.create({
      data: {
        title: 'No puedo enviar correos electr√≥nicos desde Outlook',
        description: 'Outlook me da un error cuando intento enviar emails. Dice "Error de autenticaci√≥n SMTP". He verificado mi contrase√±a y est√° correcta.',
        priority: TicketPriority.HIGH,
        status: TicketStatus.IN_PROGRESS,
        requesterId: user2.id,
        assigneeId: agent1.id
      }
    }),

    // Ticket 6: Actualizaci√≥n de antivirus
    prisma.ticket.create({
      data: {
        title: 'Antivirus necesita ser actualizado',
        description: 'Mi antivirus (McAfee) muestra que necesita ser actualizado desde hace varios d√≠as. ¬øPueden actualizarlo?',
        priority: TicketPriority.MEDIUM,
        status: TicketStatus.IN_PROGRESS,
        requesterId: user3.id,
        assigneeId: agent2.id
      }
    }),

    // Ticket 7: Proyector de sala de conferencias
    prisma.ticket.create({
      data: {
        title: 'Proyector de la sala de conferencias no se conecta',
        description: 'El proyector de la sala de conferencias principal no se conecta correctamente a mi laptop. He probado con diferentes cables HDMI.',
        priority: TicketPriority.MEDIUM,
        status: TicketStatus.RESOLVED,
        requesterId: user1.id,
        assigneeId: agent1.id,
        closedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 d√≠as atr√°s
      }
    }),

    // Ticket 8: Acceso a carpeta compartida
    prisma.ticket.create({
      data: {
        title: 'Solicitud de acceso a carpeta compartida del proyecto X',
        description: 'Necesito acceso a la carpeta compartida del proyecto X que est√° en el servidor. Soy parte del equipo del proyecto.',
        priority: TicketPriority.LOW,
        status: TicketStatus.CLOSED,
        requesterId: user2.id,
        assigneeId: agent2.id,
        closedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 d√≠as atr√°s
      }
    }),

    // Ticket 9: Error en sistema de facturaci√≥n
    prisma.ticket.create({
      data: {
        title: 'Sistema de facturaci√≥n no genera facturas correctamente',
        description: 'El sistema de facturaci√≥n no est√° generando las facturas con el formato correcto. Los n√∫meros de factura est√°n duplicados.',
        priority: TicketPriority.URGENT,
        status: TicketStatus.OPEN,
        requesterId: user3.id
      }
    }),

    // Ticket 10: Esc√°ner no funciona
    prisma.ticket.create({
      data: {
        title: 'Esc√°ner del departamento de recursos humanos no funciona',
        description: 'El esc√°ner del departamento de RRHH no est√° funcionando correctamente. Muestra un error de "Hardware not found".',
        priority: TicketPriority.MEDIUM,
        status: TicketStatus.IN_PROGRESS,
        requesterId: user1.id,
        assigneeId: agent2.id
      }
    })
  ]);

  console.log('‚úÖ Tickets creados');

  // Crear comentarios
  console.log('üí¨ Creando comentarios...');

  const comments = await Promise.all([
    // Comentarios para Ticket 2 (Impresora)
    prisma.comment.create({
      data: {
        ticketId: tickets[1].id,
        authorId: agent1.id,
        message: 'He revisado el problema. Parece ser un problema de drivers. Voy a actualizarlos y reiniciar la impresora.'
      }
    }),
    prisma.comment.create({
      data: {
        ticketId: tickets[1].id,
        authorId: user2.id,
        message: 'Gracias por la actualizaci√≥n. ¬øCu√°ndo estar√° listo? Necesito imprimir algunos documentos urgentes.'
      }
    }),
    prisma.comment.create({
      data: {
        ticketId: tickets[1].id,
        authorId: agent1.id,
        message: 'Ya est√° funcionando. He actualizado los drivers y reiniciado la impresora. Puedes probar ahora.'
      }
    }),

    // Comentarios para Ticket 3 (Adobe Photoshop)
    prisma.comment.create({
      data: {
        ticketId: tickets[2].id,
        authorId: agent2.id,
        message: 'Software instalado correctamente. Por favor, reinicia tu computadora para que los cambios surtan efecto.'
      }
    }),
    prisma.comment.create({
      data: {
        ticketId: tickets[2].id,
        authorId: user3.id,
        message: 'Perfecto, ya funciona. Gracias por la instalaci√≥n r√°pida!'
      }
    }),

    // Comentarios para Ticket 5 (Email)
    prisma.comment.create({
      data: {
        ticketId: tickets[4].id,
        authorId: agent1.id,
        message: 'He verificado la configuraci√≥n SMTP. El problema est√° en la autenticaci√≥n. Voy a restablecer tu contrase√±a de email.'
      }
    }),

    // Comentarios para Ticket 7 (Proyector)
    prisma.comment.create({
      data: {
        ticketId: tickets[6].id,
        authorId: agent1.id,
        message: 'Proyector reparado. El problema era un cable HDMI defectuoso. Ya est√° funcionando correctamente.'
      }
    }),

    // Comentarios para Ticket 8 (Carpeta compartida)
    prisma.comment.create({
      data: {
        ticketId: tickets[7].id,
        authorId: agent2.id,
        message: 'Acceso otorgado a la carpeta compartida del proyecto X. Deber√≠as poder verla en tu explorador de archivos.'
      }
    })
  ]);

  console.log('‚úÖ Comentarios creados');

  // Crear notificaciones
  console.log('üîî Creando notificaciones...');

  const notifications = await Promise.all([
    // Notificaci√≥n para usuario1 sobre ticket asignado
    prisma.notification.create({
      data: {
        userId: user1.id,
        title: 'Ticket actualizado',
        message: 'Tu ticket "Proyector de la sala de conferencias no se conecta" ha sido resuelto.',
        type: 'TICKET_UPDATE',
        read: false
      }
    }),

    // Notificaci√≥n para agente1 sobre nuevo ticket
    prisma.notification.create({
      data: {
        userId: agent1.id,
        title: 'Nuevo ticket asignado',
        message: 'Se te ha asignado el ticket "Impresora del departamento de contabilidad no funciona".',
        type: 'TICKET_ASSIGNED',
        read: false
      }
    }),

    // Notificaci√≥n para agente2 sobre ticket resuelto
    prisma.notification.create({
      data: {
        userId: agent2.id,
        title: 'Ticket resuelto',
        message: 'El ticket "Necesito instalar Adobe Photoshop" ha sido marcado como resuelto.',
        type: 'TICKET_RESOLVED',
        read: false
      }
    })
  ]);

  console.log('‚úÖ Notificaciones creadas');

  // Crear preferencias de notificaci√≥n
  console.log('‚öôÔ∏è Creando preferencias de notificaci√≥n...');

  await Promise.all([
    prisma.notificationPreferences.create({
      data: {
        userId: admin.id,
        email: true,
        inApp: true,
        ticketAssigned: true,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    }),
    prisma.notificationPreferences.create({
      data: {
        userId: agent1.id,
        email: true,
        inApp: true,
        ticketAssigned: true,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    }),
    prisma.notificationPreferences.create({
      data: {
        userId: agent2.id,
        email: true,
        inApp: false,
        ticketAssigned: true,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    }),
    prisma.notificationPreferences.create({
      data: {
        userId: user1.id,
        email: false,
        inApp: true,
        ticketAssigned: false,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    }),
    prisma.notificationPreferences.create({
      data: {
        userId: user2.id,
        email: true,
        inApp: true,
        ticketAssigned: false,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    }),
    prisma.notificationPreferences.create({
      data: {
        userId: user3.id,
        email: false,
        inApp: false,
        ticketAssigned: false,
        statusChanged: true,
        commentAdded: true,
        priorityChanged: true
      }
    })
  ]);

  console.log('‚úÖ Preferencias de notificaci√≥n creadas');

  console.log('üéâ Seed completado exitosamente!');
  console.log('\nüìã Credenciales de acceso:');
  console.log('   üëë Admin: admin@empresa.com / password123');
  console.log('   üõ†Ô∏è  Agente 1: agente1@empresa.com / password123');
  console.log('   üõ†Ô∏è  Agente 2: agente2@empresa.com / password123');
  console.log('   üë§ Usuario 1: usuario1@empresa.com / password123');
  console.log('   üë§ Usuario 2: usuario2@empresa.com / password123');
  console.log('   üë§ Usuario 3: usuario3@empresa.com / password123');
  console.log('\nüìä Estad√≠sticas:');
  console.log(`   üé´ Tickets creados: ${tickets.length}`);
  console.log(`   üí¨ Comentarios creados: ${comments.length}`);
  console.log(`   üîî Notificaciones creadas: ${notifications.length}`);
  console.log(`   üë• Usuarios creados: 6`);
}

main()
  .catch((e) => {
    console.error('‚ùå Error durante el seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
