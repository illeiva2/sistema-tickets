name: 🚀 Despliegue Automático

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Job de pruebas
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: npm ci

      - name: 🧪 Ejecutar pruebas
        run: npm test

      - name: 🔍 Linting
        run: npm run lint

  # Job de build
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: npm ci

      - name: 🏗️ Build API
        run: |
          cd apps/api
          npm run build

      - name: 🏗️ Build Frontend
        run: |
          cd apps/web
          npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            apps/api/dist/
            apps/web/dist/

  # Job de despliegue en staging (develop)
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: npm ci

      - name: 📥 Descargar build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🚀 Desplegar API (Staging)
        run: |
          cd apps/api
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Desplegar Frontend (Staging)
        run: |
          cd apps/web
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  # Job de despliegue en producción (main)
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Instalar dependencias
        run: npm ci

      - name: 📥 Descargar build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🗄️ Ejecutar migraciones de base de datos
        run: |
          cd apps/api
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 🚀 Desplegar API (Producción)
        run: |
          cd apps/api
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Desplegar Frontend (Producción)
        run: |
          cd apps/web
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🔔 Notificar despliegue exitoso
        run: |
          echo "🚀 Despliegue en producción completado exitosamente"
          echo "🌐 Frontend: ${{ secrets.FRONTEND_URL }}"
          echo "🔧 API: ${{ secrets.API_URL }}"

  # Job de notificaciones
  notify:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Resumen del despliegue
        run: |
          echo "## 🚀 Resumen del Despliegue" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Autor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "✅ **Staging:** Desplegado exitosamente" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
            echo "❌ **Staging:** Falló el despliegue" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ **Producción:** Desplegado exitosamente" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-production.result }}" == "failure" ]; then
            echo "❌ **Producción:** Falló el despliegue" >> $GITHUB_STEP_SUMMARY
          fi
